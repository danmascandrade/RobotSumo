
GccApplication7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000276  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000b  00800060  00800060  000002ea  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000002ea  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000070  00000000  00000000  0000031a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000049a  00000000  00000000  0000038a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000124  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000021d  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000154  00000000  00000000  00000b68  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000023c  00000000  00000000  00000cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001d0  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  000010c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	87 c0       	rjmp	.+270    	; 0x122 <__vector_9>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	f0 c0       	rjmp	.+480    	; 0x1f8 <__vector_11>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	ab 36       	cpi	r26, 0x6B	; 107
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	57 d0       	rcall	.+174    	; 0xf2 <main>
  44:	16 c1       	rjmp	.+556    	; 0x272 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <UARTConfig>:
		PORTD |= (1<<PD4);
		PORTD |= (1<<PD6)|(1<<PD7);
	}
	if (leftLineDetector > x && rightLineDetector < x)	//at the line left
	{
		findline = 900;
  48:	10 bc       	out	0x20, r1	; 32
  4a:	83 e3       	ldi	r24, 0x33	; 51
  4c:	89 b9       	out	0x09, r24	; 9
		direction = 2;
  4e:	86 e8       	ldi	r24, 0x86	; 134
  50:	80 bd       	out	0x20, r24	; 32
  52:	88 e9       	ldi	r24, 0x98	; 152
		Drive(0,125);
  54:	8a b9       	out	0x0a, r24	; 10
  56:	08 95       	ret

00000058 <InitADC>:
  58:	37 9a       	sbi	0x06, 7	; 6
		PORTD |= (1<<PD5);
  5a:	81 11       	cpse	r24, r1
		PORTD |= (1<<PD4);
  5c:	05 c0       	rjmp	.+10     	; 0x68 <InitADC+0x10>
		PORTD |= (1<<PD6)|(1<<PD7);
  5e:	91 e0       	ldi	r25, 0x01	; 1
  60:	66 23       	and	r22, r22
  62:	49 f0       	breq	.+18     	; 0x76 <InitADC+0x1e>
	}
	if (leftLineDetector < x && rightLineDetector < x)	//on the line
  64:	90 e0       	ldi	r25, 0x00	; 0
  66:	07 c0       	rjmp	.+14     	; 0x76 <InitADC+0x1e>
  68:	81 30       	cpi	r24, 0x01	; 1
  6a:	21 f4       	brne	.+8      	; 0x74 <InitADC+0x1c>
  6c:	61 30       	cpi	r22, 0x01	; 1
  6e:	29 f0       	breq	.+10     	; 0x7a <InitADC+0x22>
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	01 c0       	rjmp	.+2      	; 0x76 <InitADC+0x1e>
	{
		findline = 900;
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	90 ff       	sbrs	r25, 0
  78:	02 c0       	rjmp	.+4      	; 0x7e <InitADC+0x26>
  7a:	90 e6       	ldi	r25, 0x60	; 96
  7c:	97 b9       	out	0x07, r25	; 7
  7e:	81 30       	cpi	r24, 0x01	; 1
		Drive(0,0);
  80:	29 f4       	brne	.+10     	; 0x8c <InitADC+0x34>
  82:	61 11       	cpse	r22, r1
  84:	09 c0       	rjmp	.+18     	; 0x98 <InitADC+0x40>
		PORTD |= (1<<PD5);
  86:	83 e6       	ldi	r24, 0x63	; 99
		PORTD |= (1<<PD4);
  88:	87 b9       	out	0x07, r24	; 7
		PORTD |= (1<<PD6)|(1<<PD7);
  8a:	06 c0       	rjmp	.+12     	; 0x98 <InitADC+0x40>
  8c:	81 11       	cpse	r24, r1
  8e:	04 c0       	rjmp	.+8      	; 0x98 <InitADC+0x40>
	}
	if (leftLineDetector > x && rightLineDetector > x) //No line
  90:	61 30       	cpi	r22, 0x01	; 1
  92:	11 f4       	brne	.+4      	; 0x98 <InitADC+0x40>
  94:	82 e6       	ldi	r24, 0x62	; 98
  96:	87 b9       	out	0x07, r24	; 7
  98:	36 9a       	sbi	0x06, 6	; 6
  9a:	08 95       	ret

0000009c <InitPWM>:
  9c:	8f b5       	in	r24, 0x2f	; 47
  9e:	81 6a       	ori	r24, 0xA1	; 161
  a0:	8f bd       	out	0x2f, r24	; 47
  a2:	8e b5       	in	r24, 0x2e	; 46
	{
		findline++;
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	8e bd       	out	0x2e, r24	; 46
  a8:	17 bc       	out	0x27, r1	; 39
  aa:	16 bc       	out	0x26, r1	; 38
  ac:	1b bc       	out	0x2b, r1	; 43
  ae:	1a bc       	out	0x2a, r1	; 42
  b0:	19 bc       	out	0x29, r1	; 41
  b2:	18 bc       	out	0x28, r1	; 40
  b4:	08 95       	ret

000000b6 <InitDDR>:
		
		if (findline<=1600)
  b6:	87 b3       	in	r24, 0x17	; 23
  b8:	86 60       	ori	r24, 0x06	; 6
  ba:	87 bb       	out	0x17, r24	; 23
		{
			if (direction==2)
  bc:	a4 9a       	sbi	0x14, 4	; 20
  be:	81 b3       	in	r24, 0x11	; 17
  c0:	80 6c       	ori	r24, 0xC0	; 192
  c2:	81 bb       	out	0x11, r24	; 17
			{
				Drive(0,255);
  c4:	81 b3       	in	r24, 0x11	; 17
  c6:	80 63       	ori	r24, 0x30	; 48
  c8:	81 bb       	out	0x11, r24	; 17
				PORTD |= (1<<PD5);
  ca:	08 95       	ret

000000cc <InitTIM0>:
				PORTD &= ~(1<<PD4);
  cc:	89 b7       	in	r24, 0x39	; 57
				PORTD |= (1<<PD7);
  ce:	81 60       	ori	r24, 0x01	; 1
				PORTD &= ~(1<<PD6);
  d0:	89 bf       	out	0x39, r24	; 57
  d2:	83 b7       	in	r24, 0x33	; 51
			}
			else
			{
				Drive(255,0);
  d4:	85 60       	ori	r24, 0x05	; 5
  d6:	83 bf       	out	0x33, r24	; 51
  d8:	08 95       	ret

000000da <Drive>:
				PORTD |= (1<<PD5);
  da:	1b bc       	out	0x2b, r1	; 43
				PORTD &= ~(1<<PD4);
  dc:	6a bd       	out	0x2a, r22	; 42
				PORTD |= (1<<PD6);
  de:	19 bc       	out	0x29, r1	; 41
				PORTD &= ~(1<<PD7);
  e0:	88 bd       	out	0x28, r24	; 40
			}
		}
		if (findline>1600)
  e2:	08 95       	ret

000000e4 <Output>:
  e4:	5d 9b       	sbis	0x0b, 5	; 11
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <Output>
  e8:	8c b9       	out	0x0c, r24	; 12
  ea:	5e 9b       	sbis	0x0b, 6	; 11
  ec:	fe cf       	rjmp	.-4      	; 0xea <Output+0x6>
  ee:	5e 9a       	sbi	0x0b, 6	; 11
		{
			Drive(255,100);
  f0:	08 95       	ret

000000f2 <main>:
  f2:	78 94       	sei
  f4:	e0 df       	rcall	.-64     	; 0xb6 <InitDDR>
			PORTD |= (1<<PD5);
  f6:	d2 df       	rcall	.-92     	; 0x9c <InitPWM>
			PORTD &= ~(1<<PD4);
  f8:	e9 df       	rcall	.-46     	; 0xcc <InitTIM0>
			PORTD |= (1<<PD6);
  fa:	60 e0       	ldi	r22, 0x00	; 0
			PORTD &= ~(1<<PD7);
  fc:	81 e0       	ldi	r24, 0x01	; 1
		}
		if (findline>6000)
  fe:	ac df       	rcall	.-168    	; 0x58 <InitADC>
 100:	a3 df       	rcall	.-186    	; 0x48 <UARTConfig>
 102:	94 9a       	sbi	0x12, 4	; 18
 104:	80 91 6a 00 	lds	r24, 0x006A
 108:	84 30       	cpi	r24, 0x04	; 4
 10a:	18 f0       	brcs	.+6      	; 0x112 <main+0x20>
		{
			Drive(0,0);
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	e4 df       	rcall	.-56     	; 0xda <Drive>
			PORTD |= (1<<PD5);
 112:	80 91 63 00 	lds	r24, 0x0063
			PORTD |= (1<<PD4);
			PORTD |= (1<<PD6)|(1<<PD7);
 116:	84 30       	cpi	r24, 0x04	; 4
 118:	a8 f3       	brcs	.-22     	; 0x104 <main+0x12>
 11a:	6f ef       	ldi	r22, 0xFF	; 255
		}
		if (findline>8000)
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	dd df       	rcall	.-70     	; 0xda <Drive>
 120:	f1 cf       	rjmp	.-30     	; 0x104 <main+0x12>

00000122 <__vector_9>:
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
		{
			findline=0;
 12a:	11 24       	eor	r1, r1
 12c:	2f 93       	push	r18
 12e:	3f 93       	push	r19
 130:	4f 93       	push	r20
 132:	5f 93       	push	r21
		
    }	
}

ISR(TIMER0_OVF_vect)
{	
 134:	6f 93       	push	r22
 136:	7f 93       	push	r23
 138:	8f 93       	push	r24
 13a:	9f 93       	push	r25
 13c:	af 93       	push	r26
 13e:	bf 93       	push	r27
 140:	ef 93       	push	r30
 142:	ff 93       	push	r31
	tim0++;
 144:	80 91 61 00 	lds	r24, 0x0061
 148:	8f 5f       	subi	r24, 0xFF	; 255
 14a:	80 93 61 00 	sts	0x0061, r24
	if (tim0 > 1)
 14e:	82 30       	cpi	r24, 0x02	; 2
 150:	88 f1       	brcs	.+98     	; 0x1b4 <__vector_9+0x92>
	{
		PORTC |= (1<<PC4);
 152:	ac 9a       	sbi	0x15, 4	; 21
		if (tim0 > 2)
 154:	80 91 61 00 	lds	r24, 0x0061
 158:	83 30       	cpi	r24, 0x03	; 3
 15a:	e8 f1       	brcs	.+122    	; 0x1d6 <__vector_9+0xb4>
		{
			tim0 = 0;
 15c:	10 92 61 00 	sts	0x0061, r1
			
			
			InitADC(1,0);
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	79 df       	rcall	.-270    	; 0x58 <InitADC>
			IRLeftOn = ADCH;
 166:	85 b1       	in	r24, 0x05	; 5
 168:	80 93 65 00 	sts	0x0065, r24
			InitADC(0,1);
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	73 df       	rcall	.-282    	; 0x58 <InitADC>
			IRRightOn = ADCH;
 172:	95 b1       	in	r25, 0x05	; 5
 174:	90 93 69 00 	sts	0x0069, r25
			leftLineDetector = IRLeftOff - IRLeftOn;
 178:	80 91 62 00 	lds	r24, 0x0062
 17c:	20 91 65 00 	lds	r18, 0x0065
 180:	38 2f       	mov	r19, r24
 182:	32 1b       	sub	r19, r18
 184:	30 93 6a 00 	sts	0x006A, r19
			rightLineDetector = IRRightOn - IRRightOff;	
 188:	20 91 66 00 	lds	r18, 0x0066
 18c:	92 1b       	sub	r25, r18
 18e:	90 93 63 00 	sts	0x0063, r25
			Output(IRLeftOff);
 192:	a8 df       	rcall	.-176    	; 0xe4 <Output>
			Output(IRLeftOn);
 194:	80 91 65 00 	lds	r24, 0x0065
 198:	a5 df       	rcall	.-182    	; 0xe4 <Output>
			Output(leftLineDetector);
 19a:	80 91 6a 00 	lds	r24, 0x006A
 19e:	a2 df       	rcall	.-188    	; 0xe4 <Output>
			Output(IRRightOn);
 1a0:	80 91 69 00 	lds	r24, 0x0069
 1a4:	9f df       	rcall	.-194    	; 0xe4 <Output>
			Output(IRRightOff);
 1a6:	80 91 66 00 	lds	r24, 0x0066
 1aa:	9c df       	rcall	.-200    	; 0xe4 <Output>
			Output(rightLineDetector);
 1ac:	80 91 63 00 	lds	r24, 0x0063
 1b0:	99 df       	rcall	.-206    	; 0xe4 <Output>
 1b2:	11 c0       	rjmp	.+34     	; 0x1d6 <__vector_9+0xb4>
		}
	}
	else
	{
		PORTC &= ~(1<<PC4);
 1b4:	ac 98       	cbi	0x15, 4	; 21
		if (tim0 > 0)
 1b6:	80 91 61 00 	lds	r24, 0x0061
 1ba:	88 23       	and	r24, r24
 1bc:	61 f0       	breq	.+24     	; 0x1d6 <__vector_9+0xb4>
		{
			InitADC(1,0);
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	4a df       	rcall	.-364    	; 0x58 <InitADC>
			IRLeftOff = ADCH;
 1c4:	85 b1       	in	r24, 0x05	; 5
 1c6:	80 93 62 00 	sts	0x0062, r24
			InitADC(0,1);
 1ca:	61 e0       	ldi	r22, 0x01	; 1
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	44 df       	rcall	.-376    	; 0x58 <InitADC>
			IRRightOff = ADCH;
 1d0:	85 b1       	in	r24, 0x05	; 5
 1d2:	80 93 66 00 	sts	0x0066, r24
		}
	}

}
 1d6:	ff 91       	pop	r31
 1d8:	ef 91       	pop	r30
 1da:	bf 91       	pop	r27
 1dc:	af 91       	pop	r26
 1de:	9f 91       	pop	r25
 1e0:	8f 91       	pop	r24
 1e2:	7f 91       	pop	r23
 1e4:	6f 91       	pop	r22
 1e6:	5f 91       	pop	r21
 1e8:	4f 91       	pop	r20
 1ea:	3f 91       	pop	r19
 1ec:	2f 91       	pop	r18
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <__vector_11>:

ISR(USART_RXC_vect){
 1f8:	1f 92       	push	r1
 1fa:	0f 92       	push	r0
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	0f 92       	push	r0
 200:	11 24       	eor	r1, r1
 202:	2f 93       	push	r18
 204:	3f 93       	push	r19
 206:	4f 93       	push	r20
 208:	5f 93       	push	r21
 20a:	6f 93       	push	r22
 20c:	7f 93       	push	r23
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
 212:	af 93       	push	r26
 214:	bf 93       	push	r27
 216:	ef 93       	push	r30
 218:	ff 93       	push	r31
	
	command=UDR; //commands in main
 21a:	8c b1       	in	r24, 0x0c	; 12
 21c:	80 93 60 00 	sts	0x0060, r24
	
	if (command == 'b')
 220:	82 36       	cpi	r24, 0x62	; 98
 222:	49 f4       	brne	.+18     	; 0x236 <__vector_11+0x3e>
	{
		Drive(0,0);
 224:	60 e0       	ldi	r22, 0x00	; 0
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	58 df       	rcall	.-336    	; 0xda <Drive>
		PORTC &= ~(1<<PC4);
 22a:	ac 98       	cbi	0x15, 4	; 21
		PORTD |= (1<<PD5);
 22c:	95 9a       	sbi	0x12, 5	; 18
		PORTD |= (1<<PD4);
 22e:	94 9a       	sbi	0x12, 4	; 18
		PORTD |= (1<<PD6)|(1<<PD7);
 230:	82 b3       	in	r24, 0x12	; 18
 232:	80 6c       	ori	r24, 0xC0	; 192
 234:	82 bb       	out	0x12, r24	; 18
	}
	if (command == 'c')
 236:	80 91 60 00 	lds	r24, 0x0060
 23a:	83 36       	cpi	r24, 0x63	; 99
 23c:	49 f4       	brne	.+18     	; 0x250 <__vector_11+0x58>
	{
		Drive(255,255);
 23e:	6f ef       	ldi	r22, 0xFF	; 255
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	4b df       	rcall	.-362    	; 0xda <Drive>
		PORTC &= ~(1<<PC4);
 244:	ac 98       	cbi	0x15, 4	; 21
		PORTD &= ~(1<<PD5);
 246:	95 98       	cbi	0x12, 5	; 18
		PORTD &= ~(1<<PD4);
 248:	94 98       	cbi	0x12, 4	; 18
		PORTD |= (1<<PD6)|(1<<PD7);
 24a:	82 b3       	in	r24, 0x12	; 18
 24c:	80 6c       	ori	r24, 0xC0	; 192
 24e:	82 bb       	out	0x12, r24	; 18
	}
 250:	ff 91       	pop	r31
 252:	ef 91       	pop	r30
 254:	bf 91       	pop	r27
 256:	af 91       	pop	r26
 258:	9f 91       	pop	r25
 25a:	8f 91       	pop	r24
 25c:	7f 91       	pop	r23
 25e:	6f 91       	pop	r22
 260:	5f 91       	pop	r21
 262:	4f 91       	pop	r20
 264:	3f 91       	pop	r19
 266:	2f 91       	pop	r18
 268:	0f 90       	pop	r0
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	0f 90       	pop	r0
 26e:	1f 90       	pop	r1
 270:	18 95       	reti

00000272 <_exit>:
 272:	f8 94       	cli

00000274 <__stop_program>:
 274:	ff cf       	rjmp	.-2      	; 0x274 <__stop_program>
